[
["index.html", "SEM and R Chapter 1 SEM and R", " SEM and R Bill 2021-04-30 Chapter 1 SEM and R This is the starting point. "],
["intro.html", "Chapter 2 Introduction 2.1 Definitions (Basic Concepts) 2.2 The path diagram 2.3 Lavaan syntax 2.4 Regression and path analysis", " Chapter 2 Introduction The following R codes and texts are from UCLA website “https://stats.idre.ucla.edu/r/seminars/rsem/” and I do not own the copyright of the R codes or texts. I wrote this R Markdown file for my own study purpose. Given this consideration, please do NOT distribute this page in any way. 2.1 Definitions (Basic Concepts) 2.1.1 Observed variable Observed variable: A variable that exists in the data (a.k.a item or manifest variable) 2.1.2 Latent variable Latent variable: A variable that is constructed and does not exist in the data. 2.1.3 Exogenous variable Exogenous variable: An independent variable either observed (X) or latent (\\(\\xi\\)) that explains an engogenous variable. 2.1.4 Endogenous variable Endogenous variable: A dependent variable, either observed (Y) or latent (\\(\\eta\\)) that has a causal path leading to it. 2.1.5 Measurement model Measurement model: A model that links obseved variables with latent variables. 2.1.6 Indicator (in a measurement model) Indicator: An observed variable in a measurement model (can be exogenous or endogenous). 2.1.7 Factor Factor: A latent variable defined by its indicators (can be exogenous or endogeous). 2.1.8 Loading Loading: A path between an indicator and a factor. 2.1.9 Structural model Structural model: A model that specifies casual relationships among exogeous variables to endogeous variables (can be observed or latent). 2.1.10 Regerssion path Regression path: A path between exogeous and endogeous variables (can be observed or latent). 2.2 The path diagram Circles represent latent variables. Squares represent observed indicators. Triangles represent intercepts or means. One way arrows represent paths. Two-way arrows represent either variances or covariances. 2.3 Lavaan syntax \\(\\sim\\) predict: used for regression of observed outcome to observed predictors (e.g., \\(y \\sim x\\)). \\(= \\sim\\) indicator: used for latent variable to observed indicator in factor analysis measurement models (e.g., \\(f= \\sim q+r+s\\)). \\(\\sim \\sim\\) covariance: (e.g., \\(x \\sim \\sim x\\)). \\(\\sim 1\\) intercept or mean: (e.g., \\(x \\sim 1\\) estimates the mean of variable \\(x\\)). \\(1*\\) fixes parameter or loading to one: (e.g., \\(f =\\sim 1*q\\)). \\(NA *\\) free parameter or loading: used to override default marker method (e.g., \\(f=\\sim NA * q\\)). \\(a*\\) lables the parameter ‘a’: used for model constraints (e.g., \\(f=\\sim a*q\\)). 2.4 Regression and path analysis \\[y_{1}=b_{0}+b_{1}x_{1}+\\epsilon_{1}\\] \\[y_{1}=\\alpha+\\gamma_{1} x_{1}+\\zeta_{1}\\] \\(x_{1}\\) single exogenous variable \\(y_{1}\\) single endogenous variable \\(b_{0}\\), \\(\\alpha_{1}\\) intercept of \\(y_{1}\\) (alpha) \\(b_{1}\\), \\(\\gamma_{1}\\) regression coefficient (gamma) \\(\\epsilon_{1}\\), \\(\\zeta_{1}\\) residual of \\(y_{1}\\) (epsilon, zeta) \\(\\phi\\) variance or covariance of the exogenous variable (phi) \\(\\psi\\) residual variance or covariance of the endogenous variable (psi) "],
["real-data-example-simple-linear-regression.html", "Chapter 3 Real data example (Simple linear regression) 3.1 Read the data into the R Studio environment.", " Chapter 3 Real data example (Simple linear regression) 3.1 Read the data into the R Studio environment. It also calcuates the covariance matrix among all the variables in the data. dat &lt;- read.csv(&quot;https://stats.idre.ucla.edu/wp-content/uploads/2021/02/worland5.csv&quot;) cov(dat) ## motiv harm stabi ppsych ses verbal read arith spell ## motiv 100 77 59 -25 25 32 53 60 59 ## harm 77 100 58 -25 26 25 42 44 45 ## stabi 59 58 100 -16 18 27 36 38 38 ## ppsych -25 -25 -16 100 -42 -40 -39 -24 -31 ## ses 25 26 18 -42 100 40 43 37 33 ## verbal 32 25 27 -40 40 100 56 49 48 ## read 53 42 36 -39 43 56 100 73 87 ## arith 60 44 38 -24 37 49 73 100 72 ## spell 59 45 38 -31 33 48 87 72 100 var(dat$motiv) ## [1] 100 In the following, we conduct a simple linear regression. \\[sample \\ variance-covariance \\ matrix \\hat{\\sum} = \\mathbf{S} \\] m1a &lt;- lm(read ~ motiv, data=dat) (fit1a &lt;-summary(m1a)) ## ## Call: ## lm(formula = read ~ motiv, data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -26.0995 -6.1109 0.2342 5.2237 24.0183 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.232e-07 3.796e-01 0.00 1 ## motiv 5.300e-01 3.800e-02 13.95 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 8.488 on 498 degrees of freedom ## Multiple R-squared: 0.2809, Adjusted R-squared: 0.2795 ## F-statistic: 194.5 on 1 and 498 DF, p-value: &lt; 2.2e-16 library(lavaan) ## Warning: package &#39;lavaan&#39; was built under R version 3.6.3 ## This is lavaan 0.6-8 ## lavaan is FREE software! Please report any bugs. #simple regression using lavaan m1b &lt;- &#39; # regressions read ~ 1+ motiv # variance (optional) motiv ~~ motiv &#39; fit1b &lt;- sem(m1b, data=dat) summary(fit1b) ## lavaan 0.6-8 ended normally after 14 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 5 ## ## Number of observations 500 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## read ~ ## motiv 0.530 0.038 13.975 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .read -0.000 0.379 -0.000 1.000 ## motiv 0.000 0.447 0.000 1.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## motiv 99.800 6.312 15.811 0.000 ## .read 71.766 4.539 15.811 0.000 "],
["real-data-example-multiple-linear-regression.html", "Chapter 4 Real data example (Multiple linear regression)", " Chapter 4 Real data example (Multiple linear regression) m2 &lt;- &#39; # regressions read ~ 1 + ppsych + motiv # covariance ppsych ~~ motiv &#39; fit2 &lt;- sem(m2, data=dat) summary(fit2) ## lavaan 0.6-8 ended normally after 34 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 9 ## ## Number of observations 500 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## read ~ ## ppsych -0.275 0.037 -7.385 0.000 ## motiv 0.461 0.037 12.404 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## ppsych ~~ ## motiv -24.950 4.601 -5.423 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .read 0.000 0.360 0.000 1.000 ## ppsych -0.000 0.447 -0.000 1.000 ## motiv 0.000 0.447 0.000 1.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .read 64.708 4.092 15.811 0.000 ## ppsych 99.800 6.312 15.811 0.000 ## motiv 99.800 6.312 15.811 0.000 "],
["bootstrapping.html", "Chapter 5 Bootstrapping 5.1 Warning 5.2 Introduction 5.3 Normal distribution, SD, SE 5.4 Sample function 5.5 Proportion 5.6 boot package 5.7 Concept of Percentile 5.8 Bootstrapping for correlation interval", " Chapter 5 Bootstrapping 5.1 Warning Warning: This page is for my own personal study purpose. Distribution is prohibited. 5.2 Introduction The following note is made when I was studying Bret Larget’s note posted online. http://pages.stat.wisc.edu/~larget/stat302/chap3.pdf He used the data from LOck5data as an example. library(Lock5Data) data(CommuteAtlanta) str(CommuteAtlanta) ## &#39;data.frame&#39;: 500 obs. of 5 variables: ## $ City : Factor w/ 1 level &quot;Atlanta&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Age : int 19 55 48 45 48 43 48 41 47 39 ... ## $ Distance: int 10 45 12 4 15 33 15 4 25 1 ... ## $ Time : int 15 60 45 10 30 60 45 10 25 15 ... ## $ Sex : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 2 2 2 1 1 2 2 1 2 1 ... time.mean = with(CommuteAtlanta, mean(Time)) time.mean ## [1] 29.11 Now, he sampled a (b X n) table. Note that, the Atlanta data has 500 row, as it has 500 observations (or, people). But, in the following new matrix, it is a (1000 times 500) table. Also, it should be noted that the logic of sample function in R. This webpage provides some insight into this function. Basically, the following R code randomly sample a bigger sample of (1000 times 500) from those 500 data points. After that, the matrix function put such (1000 times 500) data points into a matrix of (1000 times 500). B = 1000 n = nrow(CommuteAtlanta) boot.samples = matrix(sample(CommuteAtlanta$Time, size = B * n, replace = TRUE), B, n) Next, we need to calculate the mean for each row. Remember, we have 1000 rows. Note that, 1 in the apply function indicates that we calculate means on each row, whereas 2 indicates to each column. boot.statistics = apply(boot.samples, 1, mean) We can then plot all the means. require(ggplot2) ## Loading required package: ggplot2 ## Warning: package &#39;ggplot2&#39; was built under R version 3.6.3 ggplot(data.frame(meanTime = boot.statistics),aes(x=meanTime)) + geom_histogram(binwidth=0.25,aes(y=..density..)) + geom_density(color=&quot;red&quot;) time.se = sd(boot.statistics) time.se ## [1] 0.9083362 me = ceiling(10 * 2 * time.se)/10 me ## [1] 1.9 round(time.mean, 1) + c(-1, 1) * me ## [1] 27.2 31.0 5.3 Normal distribution, SD, SE Note, if we do not use bootstraping, we can use the standard CI formula (https://www.mathsisfun.com/data/confidence-interval.html). This formula assumes normal distribution. As we can see, this is close to the result based on the bootstrapping method. \\[\\overline{X} \\pm Z \\frac{S}{\\sqrt{n}}=29.11 \\pm 1.96 \\frac{20.72}{\\sqrt{500}}=27.29, 30.93\\] Note that, in the following, the author used 2 times SE to calculate the CI. The relationship between SD and SE: “Now the sample mean will vary from sample to sample; the way this variation occurs is described by the “sampling distribution” of the mean. We can estimate how much sample means will vary from the standard deviation of this sampling distribution, which we call the standard error (SE) of the estimate of the mean. As the standard error is a type of standard deviation, confusion is understandable. Another way of considering the standard error is as a measure of the precision of the sample mean.\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1255808/) boot.mean = function(x,B,binwidth=NULL) { n = length(x) boot.samples = matrix( sample(x,size=n*B,replace=TRUE), B, n) boot.statistics = apply(boot.samples,1,mean) se = sd(boot.statistics) require(ggplot2) if ( is.null(binwidth) ) binwidth = diff(range(boot.statistics))/30 p = ggplot(data.frame(x=boot.statistics),aes(x=x)) + geom_histogram(aes(y=..density..),binwidth=binwidth) + geom_density(color=&quot;red&quot;) plot(p) interval = mean(x) + c(-1,1)*2*se print( interval ) return( list(boot.statistics = boot.statistics, interval=interval, se=se, plot=p) ) } out = with(CommuteAtlanta, boot.mean(Distance, B = 1000)) ## [1] 16.96166 19.35034 5.4 Sample function To understand the function of sample in R. sample(20,replace = TRUE) ## [1] 5 17 16 11 13 11 15 17 6 19 15 8 18 12 10 10 20 5 6 2 The following uses loop to do the resampling. It uses sample function to index the numbers that they want to sample from the original sample. That is, [] suggests the indexing. n = length(CommuteAtlanta$Distance) B = 1000 result = rep(NA, B) for (i in 1:B) { boot.sample = sample(n, replace = TRUE) result[i] = mean(CommuteAtlanta$Distance[boot.sample]) } with(CommuteAtlanta, mean(Distance) + c(-1, 1) * 2 * sd(result)) ## [1] 16.92509 19.38691 5.5 Proportion So far, we have dealed with means. How about porpotions?Remember that, when calculating means, it starts with a single column of data to calculate the mean. Similarly, when calculating porpotions, you can just use a single column of data. reeses = c(rep(1, 11), rep(0, 19)) reeses.boot = boot.mean(reeses, 1000, binwidth = 1/30) ## [1] 0.1882346 0.5450988 However, if we have 48 students (i.e., 48 observations) and thus we have a bigger sample. However, how can we do re-sampling? Based on the note, it is kind of simple. They group them together and then resample from it. Note that, when they re-sampling, the programming do not distinguish the difference between 48 observations. But just combined them as a single column (741+699=1440), and then generate a very long column (1440 times 1000) and then reshape it into a matrix (1440 time 1000). This is the basic logic of the boot.mean function. reeses = c(rep(1, 741), rep(0, 699)) reeses.boot = boot.mean(reeses, 1000, binwidth = 0.005) ## [1] 0.4876358 0.5415309 5.6 boot package After having a basic idea of boostrapping, we can then use the package of boot. library(boot) ## Warning: package &#39;boot&#39; was built under R version 3.6.3 data(CommuteAtlanta) my.mean = function(x, indices) { return( mean( x[indices] ) ) } time.boot = boot(CommuteAtlanta$Time, my.mean, 10000) boot.ci(time.boot) ## Warning in boot.ci(time.boot): bootstrap variances needed for studentized ## intervals ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = time.boot) ## ## Intervals : ## Level Normal Basic ## 95% (27.31, 30.91 ) (27.25, 30.87 ) ## ## Level Percentile BCa ## 95% (27.35, 30.97 ) (27.41, 31.05 ) ## Calculations and Intervals on Original Scale 5.7 Concept of Percentile require(Lock5Data) data(ImmuneTea) tea = with(ImmuneTea, InterferonGamma[Drink==&quot;Tea&quot;]) coffee = with(ImmuneTea, InterferonGamma[Drink==&quot;Coffee&quot;]) tea.mean = mean(tea) coffee.mean = mean(coffee) tea.n = length(tea) coffee.n = length(coffee) B = 500 # create empty arrays for the means of each sample tea.boot = numeric(B) coffee.boot = numeric(B) # Use a for loop to take the samples for ( i in 1:B ) { tea.boot[i] = mean(sample(tea,size=tea.n,replace=TRUE)) coffee.boot[i] = mean(sample(coffee,size=coffee.n,replace=TRUE)) } boot.stat = tea.boot - coffee.boot boot.stat ## [1] 13.5636364 4.5454545 15.0545455 12.5272727 7.6545455 6.9090909 ## [7] 16.4000000 14.4636364 26.1363636 8.3454545 16.6454545 23.9000000 ## [13] 11.9909091 32.4090909 12.1272727 24.9909091 38.0454545 12.8727273 ## [19] 26.7545455 26.4090909 11.8000000 15.9000000 23.9909091 17.7454545 ## [25] 20.9181818 24.3909091 12.7818182 17.4818182 19.5909091 9.8363636 ## [31] 22.3454545 0.4909091 6.3363636 11.4818182 6.6545455 21.7000000 ## [37] 19.1545455 3.4818182 12.1090909 7.4000000 4.3727273 -1.3090909 ## [43] 15.3363636 10.4636364 15.3909091 23.7000000 17.3545455 16.6181818 ## [49] 7.8090909 13.7727273 8.2636364 17.8545455 21.8818182 15.0363636 ## [55] 9.7000000 3.1363636 22.8363636 21.7727273 14.8181818 20.4818182 ## [61] 20.2272727 21.0454545 24.9454545 24.8909091 25.9272727 18.1363636 ## [67] 24.8636364 25.6181818 24.8181818 16.2818182 16.4090909 15.4090909 ## [73] 25.0454545 2.9000000 16.0090909 13.0909091 3.0363636 -0.8181818 ## [79] 17.7727273 11.9909091 20.3000000 17.4727273 20.3090909 21.6909091 ## [85] 16.5727273 15.4727273 19.3272727 26.6363636 4.2181818 22.3363636 ## [91] 16.1454545 16.4454545 15.8272727 16.4636364 10.1545455 21.1454545 ## [97] 9.9181818 13.5090909 11.6454545 17.5454545 23.3090909 15.4090909 ## [103] 22.2727273 31.8272727 23.4454545 12.5545455 27.0090909 2.4454545 ## [109] 20.0545455 17.3272727 14.0727273 6.7454545 17.2727273 14.7454545 ## [115] 20.3000000 13.6363636 3.3818182 3.8363636 9.0909091 19.4090909 ## [121] 18.2818182 6.5090909 14.3545455 29.0454545 15.3363636 23.2363636 ## [127] 34.7909091 29.1181818 15.1909091 26.0545455 27.8818182 20.9000000 ## [133] 17.1636364 20.3090909 26.1181818 25.8454545 26.1272727 18.3545455 ## [139] 27.0636364 1.0454545 6.9727273 -1.1545455 20.3545455 16.3272727 ## [145] 23.1000000 4.1818182 21.1818182 19.5909091 6.5000000 24.0909091 ## [151] 30.3727273 19.8181818 26.6909091 24.3727273 4.8727273 4.5363636 ## [157] 19.3909091 33.9090909 20.9818182 20.1818182 20.8090909 12.7545455 ## [163] 27.0454545 16.1909091 8.4454545 14.0090909 19.0363636 19.8363636 ## [169] 17.1363636 14.6000000 19.8545455 26.0454545 16.2090909 13.2454545 ## [175] 33.1181818 10.6545455 24.7636364 9.4090909 20.7181818 18.4090909 ## [181] 29.5909091 25.7272727 25.3454545 20.6181818 24.6909091 13.0454545 ## [187] 16.5272727 24.2272727 28.2363636 20.3272727 39.2454545 16.7272727 ## [193] 1.3818182 16.4363636 22.9000000 7.9909091 5.2000000 13.8454545 ## [199] 20.0090909 19.1363636 15.4181818 22.7727273 28.9727273 9.2363636 ## [205] 13.3454545 19.5818182 26.0181818 15.7727273 21.7636364 16.9818182 ## [211] 18.2272727 18.1363636 16.3090909 12.9727273 14.3545455 2.5272727 ## [217] 9.7727273 -1.4363636 16.7000000 37.5272727 17.0181818 26.0363636 ## [223] 17.5636364 18.4545455 11.3818182 24.4272727 12.4818182 3.4363636 ## [229] 14.4545455 25.2727273 29.0727273 10.0090909 -0.3181818 18.5000000 ## [235] 27.3363636 9.3272727 13.2000000 33.5818182 29.5636364 16.6545455 ## [241] 15.6727273 20.4545455 10.8454545 4.6636364 15.4454545 30.0272727 ## [247] 9.9090909 27.8727273 26.4454545 13.4727273 15.6272727 18.9000000 ## [253] 16.6363636 5.6090909 23.6363636 19.5727273 15.6727273 24.7818182 ## [259] 0.7909091 2.2181818 3.1545455 2.9272727 28.7272727 17.7818182 ## [265] 10.7909091 18.0363636 20.5545455 16.8272727 11.8727273 10.9727273 ## [271] 12.9545455 8.9909091 16.4181818 14.8454545 18.1272727 32.8454545 ## [277] 21.3090909 21.7909091 27.9727273 5.9363636 14.6363636 12.4181818 ## [283] 24.6000000 26.3454545 21.9454545 21.3181818 10.1181818 21.2636364 ## [289] 13.7272727 15.5454545 10.5545455 7.6363636 15.2000000 14.8727273 ## [295] 18.7272727 14.7181818 15.3909091 12.9090909 22.9818182 14.6636364 ## [301] 21.5181818 9.1909091 23.7545455 14.5363636 16.4636364 9.1272727 ## [307] 13.6636364 26.3454545 12.0181818 23.2636364 20.0545455 21.0363636 ## [313] 21.8545455 9.4909091 21.9090909 21.8818182 14.4545455 13.6818182 ## [319] 27.9272727 24.3909091 22.3727273 23.5909091 14.6909091 14.7818182 ## [325] 24.8454545 11.1181818 7.7454545 5.6363636 17.5909091 6.1909091 ## [331] 13.8818182 19.6727273 23.4090909 -0.1727273 15.3181818 20.0272727 ## [337] 10.7090909 7.9636364 20.2454545 18.1181818 26.1000000 17.6909091 ## [343] 20.2545455 14.2454545 17.9636364 25.1363636 8.7363636 15.8545455 ## [349] 9.4818182 26.4545455 20.0636364 20.8545455 6.4272727 15.3272727 ## [355] 23.4909091 17.1090909 24.2909091 11.5272727 18.8000000 21.4727273 ## [361] 26.5909091 7.0545455 34.7818182 35.5363636 3.2181818 20.2909091 ## [367] 11.8090909 18.8545455 18.7545455 2.4272727 7.5181818 27.5090909 ## [373] 25.1181818 19.9090909 15.3363636 -3.4818182 18.8636364 17.5454545 ## [379] 12.3636364 7.0636364 12.2181818 4.6727273 4.6818182 30.4545455 ## [385] 27.6363636 17.5181818 13.7272727 29.1818182 12.2454545 17.5818182 ## [391] -9.8272727 15.9363636 6.8272727 18.2090909 26.2909091 16.2636364 ## [397] 12.7090909 21.4181818 4.8727273 7.9818182 25.9090909 11.2909091 ## [403] 16.4454545 -0.3272727 13.9727273 10.3272727 1.3272727 13.4272727 ## [409] 27.2818182 33.8545455 23.1000000 25.4909091 17.0181818 17.1272727 ## [415] 26.3181818 5.3000000 32.1090909 10.9272727 23.1909091 9.2181818 ## [421] 17.4090909 6.4727273 21.0909091 16.3454545 9.5363636 17.8181818 ## [427] 29.3727273 16.4454545 24.7454545 -1.8909091 12.5181818 13.6545455 ## [433] 20.1545455 15.7636364 29.4545455 7.9727273 22.6727273 12.9000000 ## [439] 24.1363636 13.3727273 4.6636364 11.9545455 18.1272727 5.2363636 ## [445] 9.2909091 24.4181818 17.5090909 11.3727273 9.6727273 17.6363636 ## [451] 15.3909091 10.9909091 19.9181818 6.8909091 7.3727273 32.9454545 ## [457] 9.5000000 27.8636364 30.2090909 14.5363636 16.5363636 20.7090909 ## [463] 25.7000000 22.0727273 11.8636364 26.4272727 22.4727273 5.4818182 ## [469] 28.1000000 27.4090909 25.7090909 21.1090909 8.5181818 21.6454545 ## [475] 27.9181818 18.3272727 6.3727273 26.0272727 6.1545455 17.4545455 ## [481] 15.4545455 22.4272727 15.6818182 16.4181818 28.0181818 4.3000000 ## [487] 7.3636364 2.6272727 20.8818182 18.4000000 21.2454545 17.4363636 ## [493] 23.3454545 26.7727273 20.2909091 14.6545455 29.2909091 -7.7636364 ## [499] 24.4636364 17.2636364 # Find endpoints for 90%, 95%, and 99% bootstrap confidence intervals using percentiles. # 90%: 5% 95% quantile(boot.stat,c(0.05,0.95)) ## 5% 95% ## 3.153636 29.121364 # 95%: 2.5% 97.5% quantile(boot.stat,c(0.025,0.975)) ## 2.5% 97.5% ## 0.9118182 32.2665909 # 99%: 0.5% 99.5% quantile(boot.stat,c(0.005,0.995)) ## 0.5% 99.5% ## -2.694318 36.541773 5.8 Bootstrapping for correlation interval Some data and code are from: https://blog.methodsconsultants.com/posts/understanding-bootstrap-confidence-interval-output-from-the-r-boot-package/ data_correlation&lt;-read.csv(&quot;data_correlation.csv&quot;,fileEncoding=&quot;UTF-8-BOM&quot;) data_correlation ## Student LSAT GPA ## 1 1 576 3.39 ## 2 2 635 3.30 ## 3 3 558 2.81 ## 4 4 578 3.03 ## 5 5 666 3.44 ## 6 6 580 3.07 ## 7 7 555 3.00 ## 8 8 661 3.43 ## 9 9 651 3.36 ## 10 10 605 3.13 ## 11 11 653 3.12 ## 12 12 575 2.74 ## 13 13 545 2.76 ## 14 14 572 2.88 ## 15 15 594 2.96 cor.test(data_correlation$LSAT,data_correlation$GPA) ## ## Pearson&#39;s product-moment correlation ## ## data: data_correlation$LSAT and data_correlation$GPA ## t = 4.4413, df = 13, p-value = 0.0006651 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.4385108 0.9219648 ## sample estimates: ## cor ## 0.7763745 In the following, I will write my own code to execute the bootstrapping. I set the bootstrapping number only 500, for illustrative purposes. As we can see, the distribution is not symmetrical. As we can see, the quantile result and c(-1, 1) X 2 are not the same, as the latter assumes symmetrical distribution. However, based on the histogram, we know it is not the case. Thus, quantile would be more appropriate. You can compare the result with that from the boot function. n_row = nrow(data_correlation) n_row ## [1] 15 set.seed(12345) B = 500 result = rep(NA, B) for (i in 1:B) { boot.sample = sample(n_row, replace = TRUE) result_temp = cor.test(data_correlation[boot.sample,]$LSAT,data_correlation[boot.sample,]$GPA) result[i]=result_temp$estimate } hist(result) # 95%: 2.5% 97.5% quantile(result,c(0.025,0.975)) ## 2.5% 97.5% ## 0.4369293 0.9556859 sd(result) ## [1] 0.1342631 mean(result) + c(-1, 1) * 1.96 * sd(result) ## [1] 0.5107704 1.0370816 cor(data_correlation$LSAT,data_correlation$GPA) ## [1] 0.7763745 cor(data_correlation$LSAT,data_correlation$GPA)+ c(-1, 1) * 1.96 * sd(result) ## [1] 0.5132189 1.0395301 # why add 0.005? Not sure. The following is from the webpage. Later note: please refer to the webpage, as it provides the logic of basic interval. 0.776+0.005+c(-1, 1) * 1.96 * 0.131 ## [1] 0.52424 1.03776 In the blog mentioned above, the author used the boot function in R. For the logic of basic interval, please refer to: https://blog.methodsconsultants.com/posts/understanding-bootstrap-confidence-interval-output-from-the-r-boot-package/ library(boot) get_r &lt;- function(data, indices, x, y) { d &lt;- data[indices, ] r &lt;- round(as.numeric(cor(d[x], d[y])), 3) r} set.seed(12345) boot_out &lt;- boot( data_correlation, x = &quot;LSAT&quot;, y = &quot;GPA&quot;, R = 500, statistic = get_r ) boot.ci(boot_out) ## Warning in boot.ci(boot_out): bootstrap variances needed for studentized ## intervals ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 500 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = boot_out) ## ## Intervals : ## Level Normal Basic ## 95% ( 0.5247, 1.0368 ) ( 0.5900, 1.0911 ) ## ## Level Percentile BCa ## 95% ( 0.4609, 0.9620 ) ( 0.3948, 0.9443 ) ## Calculations and Intervals on Original Scale ## Some BCa intervals may be unstable "],
["poisson-regression.html", "Chapter 6 Poisson Regression 6.1 Use R for mediation", " Chapter 6 Poisson Regression There are some other sources of website https://rdrr.io/github/sta303-bolton/sta303w8/f/inst/rmarkdown/templates/philippines/skeleton/skeleton.Rmd fHH1 &lt;- read.csv(&quot;https://raw.githubusercontent.com/proback/BeyondMLR/master/data/fHH1.csv&quot;) head(fHH1) ## X location age total numLT5 roof ## 1 1 CentralLuzon 65 0 0 Predominantly Strong Material ## 2 2 MetroManila 75 3 0 Predominantly Strong Material ## 3 3 DavaoRegion 54 4 0 Predominantly Strong Material ## 4 4 Visayas 49 3 0 Predominantly Strong Material ## 5 5 MetroManila 74 3 0 Predominantly Strong Material ## 6 6 Visayas 59 6 0 Predominantly Strong Material \\[log (\\lambda_X) =\\beta_0+\\beta_1 X\\] \\[log (\\lambda_{X+1}) =\\beta_0+\\beta_1 (X+1)\\] Thus, \\[log (\\lambda_{X+1})-log (\\lambda_X) =(\\beta_0+\\beta_1 (X+1))-(\\beta_0+\\beta_1 X)\\] Thus, \\[log (\\frac{\\lambda_{X+1}}{\\lambda_X}) =\\beta_1\\] Thus, \\[\\frac{\\lambda_{X+1}}{\\lambda_X} =e^{\\beta_1}\\] Note that, \\(\\lambda\\) here is the mean. It is poisson regression, and the parameter is the mean. Thus, \\(\\frac{\\lambda_{X+1}}{\\lambda_X} =e^{\\beta_1}\\) suggests the ratio change in the DV as the IV change in one unit. \\[log (\\hat{\\lambda}) =b_0+b_1 Age\\] result_1 = glm(total ~ age, family = poisson, data = fHH1) result_1 ## ## Call: glm(formula = total ~ age, family = poisson, data = fHH1) ## ## Coefficients: ## (Intercept) age ## 1.549942 -0.004706 ## ## Degrees of Freedom: 1499 Total (i.e. Null); 1498 Residual ## Null Deviance: 2362 ## Residual Deviance: 2337 AIC: 6714 \\[\\frac{\\lambda_{Age+1}}{\\lambda_{Age}} =e^{\\beta_1}=e^{-0.0047}=0.995\\] But, what does it mean? It is a bit tricky. But, we can make some modification to help us understand. \\[\\lambda_{Age+1} =0.995 \\lambda_{Age}\\] \\[\\lambda_{Age+1} - \\lambda_{Age}=0.995 \\lambda_{Age}- \\lambda_{Age}=-0.005 \\lambda_{Age}\\] Thus, we can understand that, the mean of household size difference by changing 1 unit of age (i.e., \\(\\lambda_{Age+1} - \\lambda_{Age}\\)) is \\(-0.005 \\lambda_{Age}\\). 6.1 Use R for mediation https://advstats.psychstat.org/book/mediation/index.php "]
]
