[
["index.html", "SEM and R Chapter 1 SEM and R", " SEM and R Bill 2021-05-02 Chapter 1 SEM and R This is the starting point. "],
["intro.html", "Chapter 2 Introduction 2.1 Definitions (Basic Concepts) 2.2 The path diagram 2.3 Lavaan syntax 2.4 Regression and path analysis", " Chapter 2 Introduction The following R codes and texts are from UCLA website “https://stats.idre.ucla.edu/r/seminars/rsem/” and I do not own the copyright of the R codes or texts. I wrote this R Markdown file for my own study purpose. Given this consideration, please do NOT distribute this page in any way. 2.1 Definitions (Basic Concepts) 2.1.1 Observed variable Observed variable: A variable that exists in the data (a.k.a item or manifest variable) 2.1.2 Latent variable Latent variable: A variable that is constructed and does not exist in the data. 2.1.3 Exogenous variable Exogenous variable: An independent variable either observed (X) or latent (\\(\\xi\\)) that explains an engogenous variable. 2.1.4 Endogenous variable Endogenous variable: A dependent variable, either observed (Y) or latent (\\(\\eta\\)) that has a causal path leading to it. 2.1.5 Measurement model Measurement model: A model that links obseved variables with latent variables. 2.1.6 Indicator (in a measurement model) Indicator: An observed variable in a measurement model (can be exogenous or endogenous). 2.1.7 Factor Factor: A latent variable defined by its indicators (can be exogenous or endogeous). 2.1.8 Loading Loading: A path between an indicator and a factor. 2.1.9 Structural model Structural model: A model that specifies casual relationships among exogeous variables to endogeous variables (can be observed or latent). 2.1.10 Regerssion path Regression path: A path between exogeous and endogeous variables (can be observed or latent). 2.2 The path diagram Circles represent latent variables. Squares represent observed indicators. Triangles represent intercepts or means. One way arrows represent paths. Two-way arrows represent either variances or covariances. 2.3 Lavaan syntax \\(\\sim\\) predict: used for regression of observed outcome to observed predictors (e.g., \\(y \\sim x\\)). \\(= \\sim\\) indicator: used for latent variable to observed indicator in factor analysis measurement models (e.g., \\(f= \\sim q+r+s\\)). \\(\\sim \\sim\\) covariance: (e.g., \\(x \\sim \\sim x\\)). \\(\\sim 1\\) intercept or mean: (e.g., \\(x \\sim 1\\) estimates the mean of variable \\(x\\)). \\(1*\\) fixes parameter or loading to one: (e.g., \\(f =\\sim 1*q\\)). \\(NA *\\) free parameter or loading: used to override default marker method (e.g., \\(f=\\sim NA * q\\)). \\(a*\\) lables the parameter ‘a’: used for model constraints (e.g., \\(f=\\sim a*q\\)). 2.4 Regression and path analysis \\[y_{1}=b_{0}+b_{1}x_{1}+\\epsilon_{1}\\] \\[y_{1}=\\alpha+\\gamma_{1} x_{1}+\\zeta_{1}\\] \\(x_{1}\\) single exogenous variable \\(y_{1}\\) single endogenous variable \\(b_{0}\\), \\(\\alpha_{1}\\) intercept of \\(y_{1}\\) (alpha) \\(b_{1}\\), \\(\\gamma_{1}\\) regression coefficient (gamma) \\(\\epsilon_{1}\\), \\(\\zeta_{1}\\) residual of \\(y_{1}\\) (epsilon, zeta) \\(\\phi\\) variance or covariance of the exogenous variable (phi) \\(\\psi\\) residual variance or covariance of the endogenous variable (psi) "],
["real-data-example-simple-linear-regression.html", "Chapter 3 Real data example (Simple linear regression) 3.1 Read the data into the R Studio environment.", " Chapter 3 Real data example (Simple linear regression) 3.1 Read the data into the R Studio environment. It also calcuates the covariance matrix among all the variables in the data. dat &lt;- read.csv(&quot;https://stats.idre.ucla.edu/wp-content/uploads/2021/02/worland5.csv&quot;) cov(dat) ## motiv harm stabi ppsych ses verbal read arith spell ## motiv 100 77 59 -25 25 32 53 60 59 ## harm 77 100 58 -25 26 25 42 44 45 ## stabi 59 58 100 -16 18 27 36 38 38 ## ppsych -25 -25 -16 100 -42 -40 -39 -24 -31 ## ses 25 26 18 -42 100 40 43 37 33 ## verbal 32 25 27 -40 40 100 56 49 48 ## read 53 42 36 -39 43 56 100 73 87 ## arith 60 44 38 -24 37 49 73 100 72 ## spell 59 45 38 -31 33 48 87 72 100 var(dat$motiv) ## [1] 100 In the following, we conduct a simple linear regression. \\[sample \\ variance-covariance \\ matrix \\hat{\\sum} = \\mathbf{S} \\] m1a &lt;- lm(read ~ motiv, data=dat) (fit1a &lt;-summary(m1a)) ## ## Call: ## lm(formula = read ~ motiv, data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -26.0995 -6.1109 0.2342 5.2237 24.0183 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.232e-07 3.796e-01 0.00 1 ## motiv 5.300e-01 3.800e-02 13.95 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 8.488 on 498 degrees of freedom ## Multiple R-squared: 0.2809, Adjusted R-squared: 0.2795 ## F-statistic: 194.5 on 1 and 498 DF, p-value: &lt; 2.2e-16 library(lavaan) ## Warning: package &#39;lavaan&#39; was built under R version 3.6.3 ## This is lavaan 0.6-8 ## lavaan is FREE software! Please report any bugs. #simple regression using lavaan m1b &lt;- &#39; # regressions read ~ 1+ motiv # variance (optional) motiv ~~ motiv &#39; fit1b &lt;- sem(m1b, data=dat) summary(fit1b) ## lavaan 0.6-8 ended normally after 14 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 5 ## ## Number of observations 500 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## read ~ ## motiv 0.530 0.038 13.975 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .read -0.000 0.379 -0.000 1.000 ## motiv 0.000 0.447 0.000 1.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## motiv 99.800 6.312 15.811 0.000 ## .read 71.766 4.539 15.811 0.000 "],
["real-data-example-multiple-linear-regression.html", "Chapter 4 Real data example (Multiple linear regression)", " Chapter 4 Real data example (Multiple linear regression) m2 &lt;- &#39; # regressions read ~ 1 + ppsych + motiv # covariance ppsych ~~ motiv &#39; fit2 &lt;- sem(m2, data=dat) summary(fit2) ## lavaan 0.6-8 ended normally after 34 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 9 ## ## Number of observations 500 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## read ~ ## ppsych -0.275 0.037 -7.385 0.000 ## motiv 0.461 0.037 12.404 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## ppsych ~~ ## motiv -24.950 4.601 -5.423 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .read 0.000 0.360 0.000 1.000 ## ppsych -0.000 0.447 -0.000 1.000 ## motiv 0.000 0.447 0.000 1.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .read 64.708 4.092 15.811 0.000 ## ppsych 99.800 6.312 15.811 0.000 ## motiv 99.800 6.312 15.811 0.000 "],
["bootstrapping.html", "Chapter 5 Bootstrapping 5.1 Warning 5.2 Introduction 5.3 Normal distribution, SD, SE 5.4 Sample function 5.5 Proportion 5.6 boot package 5.7 Concept of Percentile 5.8 Bootstrapping for correlation interval", " Chapter 5 Bootstrapping 5.1 Warning Warning: This page is for my own personal study purpose. Distribution is prohibited. 5.2 Introduction The following note is made when I was studying Bret Larget’s note posted online. http://pages.stat.wisc.edu/~larget/stat302/chap3.pdf He used the data from LOck5data as an example. library(Lock5Data) data(CommuteAtlanta) str(CommuteAtlanta) ## &#39;data.frame&#39;: 500 obs. of 5 variables: ## $ City : Factor w/ 1 level &quot;Atlanta&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Age : int 19 55 48 45 48 43 48 41 47 39 ... ## $ Distance: int 10 45 12 4 15 33 15 4 25 1 ... ## $ Time : int 15 60 45 10 30 60 45 10 25 15 ... ## $ Sex : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 2 2 2 1 1 2 2 1 2 1 ... time.mean = with(CommuteAtlanta, mean(Time)) time.mean ## [1] 29.11 Now, he sampled a (b X n) table. Note that, the Atlanta data has 500 row, as it has 500 observations (or, people). But, in the following new matrix, it is a (1000 times 500) table. Also, it should be noted that the logic of sample function in R. This webpage provides some insight into this function. Basically, the following R code randomly sample a bigger sample of (1000 times 500) from those 500 data points. After that, the matrix function put such (1000 times 500) data points into a matrix of (1000 times 500). B = 1000 n = nrow(CommuteAtlanta) boot.samples = matrix(sample(CommuteAtlanta$Time, size = B * n, replace = TRUE), B, n) Next, we need to calculate the mean for each row. Remember, we have 1000 rows. Note that, 1 in the apply function indicates that we calculate means on each row, whereas 2 indicates to each column. boot.statistics = apply(boot.samples, 1, mean) We can then plot all the means. require(ggplot2) ## Loading required package: ggplot2 ## Warning: package &#39;ggplot2&#39; was built under R version 3.6.3 ggplot(data.frame(meanTime = boot.statistics),aes(x=meanTime)) + geom_histogram(binwidth=0.25,aes(y=..density..)) + geom_density(color=&quot;red&quot;) time.se = sd(boot.statistics) time.se ## [1] 0.897676 me = ceiling(10 * 2 * time.se)/10 me ## [1] 1.8 round(time.mean, 1) + c(-1, 1) * me ## [1] 27.3 30.9 5.3 Normal distribution, SD, SE Note, if we do not use bootstraping, we can use the standard CI formula (https://www.mathsisfun.com/data/confidence-interval.html). This formula assumes normal distribution. As we can see, this is close to the result based on the bootstrapping method. \\[\\overline{X} \\pm Z \\frac{S}{\\sqrt{n}}=29.11 \\pm 1.96 \\frac{20.72}{\\sqrt{500}}=27.29, 30.93\\] Note that, in the following, the author used 2 times SE to calculate the CI. The relationship between SD and SE: “Now the sample mean will vary from sample to sample; the way this variation occurs is described by the “sampling distribution” of the mean. We can estimate how much sample means will vary from the standard deviation of this sampling distribution, which we call the standard error (SE) of the estimate of the mean. As the standard error is a type of standard deviation, confusion is understandable. Another way of considering the standard error is as a measure of the precision of the sample mean.\" (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1255808/) boot.mean = function(x,B,binwidth=NULL) { n = length(x) boot.samples = matrix( sample(x,size=n*B,replace=TRUE), B, n) boot.statistics = apply(boot.samples,1,mean) se = sd(boot.statistics) require(ggplot2) if ( is.null(binwidth) ) binwidth = diff(range(boot.statistics))/30 p = ggplot(data.frame(x=boot.statistics),aes(x=x)) + geom_histogram(aes(y=..density..),binwidth=binwidth) + geom_density(color=&quot;red&quot;) plot(p) interval = mean(x) + c(-1,1)*2*se print( interval ) return( list(boot.statistics = boot.statistics, interval=interval, se=se, plot=p) ) } out = with(CommuteAtlanta, boot.mean(Distance, B = 1000)) ## [1] 16.95696 19.35504 5.4 Sample function To understand the function of sample in R. sample(20,replace = TRUE) ## [1] 13 20 15 17 15 15 10 20 11 6 7 4 13 9 2 15 6 19 1 17 The following uses loop to do the resampling. It uses sample function to index the numbers that they want to sample from the original sample. That is, [] suggests the indexing. n = length(CommuteAtlanta$Distance) B = 1000 result = rep(NA, B) for (i in 1:B) { boot.sample = sample(n, replace = TRUE) result[i] = mean(CommuteAtlanta$Distance[boot.sample]) } with(CommuteAtlanta, mean(Distance) + c(-1, 1) * 2 * sd(result)) ## [1] 16.89079 19.42121 5.5 Proportion So far, we have dealed with means. How about porpotions?Remember that, when calculating means, it starts with a single column of data to calculate the mean. Similarly, when calculating porpotions, you can just use a single column of data. reeses = c(rep(1, 11), rep(0, 19)) reeses.boot = boot.mean(reeses, 1000, binwidth = 1/30) ## [1] 0.1847932 0.5485402 However, if we have 48 students (i.e., 48 observations) and thus we have a bigger sample. However, how can we do re-sampling? Based on the note, it is kind of simple. They group them together and then resample from it. Note that, when they re-sampling, the programming do not distinguish the difference between 48 observations. But just combined them as a single column (741+699=1440), and then generate a very long column (1440 times 1000) and then reshape it into a matrix (1440 time 1000). This is the basic logic of the boot.mean function. reeses = c(rep(1, 741), rep(0, 699)) reeses.boot = boot.mean(reeses, 1000, binwidth = 0.005) ## [1] 0.4877194 0.5414472 5.6 boot package After having a basic idea of boostrapping, we can then use the package of boot. library(boot) ## Warning: package &#39;boot&#39; was built under R version 3.6.3 data(CommuteAtlanta) my.mean = function(x, indices) { return( mean( x[indices] ) ) } time.boot = boot(CommuteAtlanta$Time, my.mean, 10000) boot.ci(time.boot) ## Warning in boot.ci(time.boot): bootstrap variances needed for studentized ## intervals ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 10000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = time.boot) ## ## Intervals : ## Level Normal Basic ## 95% (27.29, 30.95 ) (27.23, 30.89 ) ## ## Level Percentile BCa ## 95% (27.33, 30.99 ) (27.43, 31.14 ) ## Calculations and Intervals on Original Scale 5.7 Concept of Percentile require(Lock5Data) data(ImmuneTea) tea = with(ImmuneTea, InterferonGamma[Drink==&quot;Tea&quot;]) coffee = with(ImmuneTea, InterferonGamma[Drink==&quot;Coffee&quot;]) tea.mean = mean(tea) coffee.mean = mean(coffee) tea.n = length(tea) coffee.n = length(coffee) B = 500 # create empty arrays for the means of each sample tea.boot = numeric(B) coffee.boot = numeric(B) # Use a for loop to take the samples for ( i in 1:B ) { tea.boot[i] = mean(sample(tea,size=tea.n,replace=TRUE)) coffee.boot[i] = mean(sample(coffee,size=coffee.n,replace=TRUE)) } boot.stat = tea.boot - coffee.boot boot.stat ## [1] 12.2000000 12.3090909 22.0727273 7.7545455 12.3636364 ## [6] 20.8000000 6.8454545 4.3181818 33.1818182 21.5545455 ## [11] 12.4909091 15.4909091 -10.4272727 18.2909091 13.6454545 ## [16] 14.5181818 22.4090909 5.0272727 13.3363636 12.7454545 ## [21] 20.2818182 1.9090909 21.3272727 18.2636364 11.4363636 ## [26] 15.7727273 1.2818182 23.7454545 6.1272727 18.4090909 ## [31] 18.9727273 18.9090909 23.8909091 2.5363636 17.2454545 ## [36] 20.2454545 15.2090909 25.4545455 20.4272727 17.8909091 ## [41] 25.1454545 2.4909091 21.0000000 14.3363636 11.5909091 ## [46] 13.3909091 23.2636364 24.8363636 5.9454545 23.9818182 ## [51] 12.4181818 14.4272727 23.0545455 30.8727273 8.0636364 ## [56] 10.2000000 14.9727273 3.2000000 12.0909091 32.6000000 ## [61] 17.2727273 26.9727273 5.1000000 13.0909091 29.4727273 ## [66] 10.9636364 26.3272727 18.4727273 13.8545455 18.8545455 ## [71] 20.9000000 32.7090909 26.6181818 31.9181818 18.0727273 ## [76] 13.8181818 33.1272727 20.5272727 19.0454545 11.3272727 ## [81] 15.6818182 15.8363636 12.7454545 7.7454545 9.7909091 ## [86] 4.3454545 17.1545455 16.7727273 -2.9181818 20.7545455 ## [91] 13.0363636 21.4545455 16.5090909 16.1909091 15.6000000 ## [96] 9.9818182 25.2000000 5.7090909 23.8000000 34.3272727 ## [101] 12.9363636 15.2181818 10.5272727 9.7909091 26.5545455 ## [106] 17.0363636 11.2636364 36.3090909 15.3545455 11.4000000 ## [111] 9.8727273 14.5727273 9.2727273 17.8818182 34.2818182 ## [116] 23.3090909 25.5909091 14.2818182 19.6090909 22.2454545 ## [121] 15.6727273 33.5545455 15.8636364 32.6636364 15.9272727 ## [126] 10.1090909 23.3818182 16.1727273 25.1363636 5.5000000 ## [131] 11.8545455 14.9000000 21.5454545 14.8454545 12.0090909 ## [136] 20.1090909 20.1090909 19.0727273 21.9818182 12.9090909 ## [141] 18.8000000 20.1363636 10.6090909 23.4000000 11.4272727 ## [146] 22.4454545 11.2727273 26.4363636 15.2727273 27.9818182 ## [151] 12.6454545 22.8545455 26.5545455 9.7181818 15.2181818 ## [156] 10.4818182 16.6181818 4.8090909 25.5909091 11.8636364 ## [161] 8.2636364 7.9090909 3.6272727 24.7727273 30.8000000 ## [166] 17.4000000 17.8818182 20.0636364 14.2363636 24.3090909 ## [171] 2.1454545 14.0545455 11.5909091 16.1727273 25.9181818 ## [176] 30.2818182 26.9454545 26.6181818 16.2909091 15.9727273 ## [181] 20.8090909 6.7818182 30.7454545 16.4818182 13.2000000 ## [186] 21.8454545 4.4000000 13.5636364 25.3909091 21.1363636 ## [191] 22.4181818 20.2181818 14.4727273 25.8909091 16.2727273 ## [196] 19.0000000 17.3545455 20.7818182 6.8000000 15.7545455 ## [201] 18.1000000 20.5272727 12.8181818 16.6454545 15.8818182 ## [206] 26.4363636 13.3000000 39.6363636 20.1181818 14.4363636 ## [211] 14.8363636 23.1363636 6.5636364 4.1818182 12.8727273 ## [216] 24.8363636 14.7545455 15.6727273 16.7090909 20.9636364 ## [221] 12.0636364 18.3000000 19.1727273 16.6272727 23.3636364 ## [226] 4.1909091 22.7000000 9.2090909 10.9454545 16.4727273 ## [231] 14.3000000 28.3909091 14.4272727 21.9272727 5.8636364 ## [236] 20.6272727 18.2181818 14.3181818 11.1272727 29.3818182 ## [241] 18.4909091 16.6818182 25.6090909 25.7636364 6.9000000 ## [246] 31.3181818 20.3181818 14.8636364 18.1090909 22.2909091 ## [251] 20.3000000 8.1000000 8.6545455 22.1636364 10.8909091 ## [256] 19.4090909 17.7000000 8.6909091 10.0000000 17.2000000 ## [261] 9.5727273 34.0181818 14.5545455 23.6727273 3.8909091 ## [266] 27.0363636 21.2909091 17.1000000 19.9545455 18.6181818 ## [271] 14.9181818 18.2363636 -1.8818182 21.5181818 18.0909091 ## [276] 10.2272727 14.7363636 16.0272727 3.7727273 12.2454545 ## [281] 5.7090909 3.3636364 13.1727273 35.9363636 21.5545455 ## [286] 16.1090909 9.8818182 17.0272727 20.8818182 21.1545455 ## [291] 13.8000000 12.3454545 25.4818182 10.8363636 21.0818182 ## [296] 22.8727273 14.2090909 8.0909091 20.3636364 3.6090909 ## [301] 14.6818182 19.0181818 30.0363636 11.1727273 6.4181818 ## [306] 14.2000000 7.6000000 21.5818182 16.9181818 10.9181818 ## [311] 16.7363636 15.7090909 13.3727273 23.6818182 17.4272727 ## [316] 11.7545455 9.9727273 33.0909091 29.7909091 28.8545455 ## [321] 23.8636364 21.0545455 23.6454545 22.8545455 17.8909091 ## [326] 27.2636364 7.1545455 15.6727273 20.0454545 20.7090909 ## [331] 12.8454545 15.0000000 16.5636364 16.9454545 12.2181818 ## [336] 8.3090909 30.4727273 23.4272727 16.8272727 18.6727273 ## [341] 22.6545455 5.1818182 4.1454545 25.3090909 16.4909091 ## [346] 10.4818182 18.9272727 19.6454545 18.3454545 29.3818182 ## [351] 24.1909091 18.1909091 1.7454545 16.5454545 17.1545455 ## [356] 16.3181818 9.9909091 15.5818182 7.3000000 16.2818182 ## [361] 7.6000000 6.9454545 14.1818182 26.9727273 25.1727273 ## [366] 9.5727273 20.1545455 31.6272727 29.7545455 25.9363636 ## [371] 16.9181818 11.6818182 22.9181818 29.9454545 15.0636364 ## [376] 25.2090909 11.3363636 21.3272727 8.1636364 19.9090909 ## [381] 2.5363636 26.5545455 7.7727273 24.0181818 0.7272727 ## [386] 13.2909091 16.0363636 15.3727273 17.8818182 23.7909091 ## [391] 24.5454545 15.8181818 10.9363636 27.8454545 11.7636364 ## [396] 11.2090909 22.9000000 31.2636364 22.4272727 25.3727273 ## [401] 22.1545455 22.0000000 25.6727273 19.1636364 9.9727273 ## [406] 20.8181818 25.1545455 28.8090909 9.3090909 21.5000000 ## [411] 30.6636364 36.9272727 10.2454545 15.1909091 23.4181818 ## [416] 18.6454545 15.7909091 22.6545455 8.8636364 18.0363636 ## [421] 7.8363636 6.1000000 10.0727273 14.0272727 9.4727273 ## [426] 18.9818182 1.6636364 22.7818182 16.4909091 16.7181818 ## [431] 10.8000000 15.6545455 13.8545455 16.8272727 12.5818182 ## [436] 26.6181818 10.6181818 13.1545455 14.4272727 23.3181818 ## [441] 25.2363636 13.2000000 24.7181818 2.2727273 6.6090909 ## [446] 21.3363636 14.7363636 11.2181818 31.2272727 32.1545455 ## [451] 14.5000000 24.5000000 18.8727273 20.4545455 21.4909091 ## [456] 14.7545455 30.2818182 23.3090909 20.7000000 20.0636364 ## [461] 19.4454545 30.9727273 11.0727273 17.6363636 17.9636364 ## [466] 8.6181818 23.9636364 19.8000000 20.7545455 11.7818182 ## [471] 21.3727273 14.2818182 17.1818182 26.4181818 1.2818182 ## [476] 14.3000000 16.6818182 21.4090909 10.6272727 14.9727273 ## [481] 17.7727273 20.4000000 21.4181818 9.4000000 21.3272727 ## [486] 18.0363636 18.0636364 10.7727273 19.9363636 20.4818182 ## [491] 21.0636364 6.0454545 3.0181818 18.4090909 20.6000000 ## [496] 6.1454545 26.3636364 -2.0818182 4.8545455 5.4181818 # Find endpoints for 90%, 95%, and 99% bootstrap confidence intervals using percentiles. # 90%: 5% 95% quantile(boot.stat,c(0.05,0.95)) ## 5% 95% ## 4.311818 30.482273 # 95%: 2.5% 97.5% quantile(boot.stat,c(0.025,0.975)) ## 2.5% 97.5% ## 2.51250 32.63341 # 99%: 0.5% 99.5% quantile(boot.stat,c(0.005,0.995)) ## 0.5% 99.5% ## -1.982818 36.124591 5.8 Bootstrapping for correlation interval Some data and code are from: https://blog.methodsconsultants.com/posts/understanding-bootstrap-confidence-interval-output-from-the-r-boot-package/ data_correlation&lt;-read.csv(&quot;data_correlation.csv&quot;,fileEncoding=&quot;UTF-8-BOM&quot;) data_correlation ## Student LSAT GPA ## 1 1 576 3.39 ## 2 2 635 3.30 ## 3 3 558 2.81 ## 4 4 578 3.03 ## 5 5 666 3.44 ## 6 6 580 3.07 ## 7 7 555 3.00 ## 8 8 661 3.43 ## 9 9 651 3.36 ## 10 10 605 3.13 ## 11 11 653 3.12 ## 12 12 575 2.74 ## 13 13 545 2.76 ## 14 14 572 2.88 ## 15 15 594 2.96 cor.test(data_correlation$LSAT,data_correlation$GPA) ## ## Pearson&#39;s product-moment correlation ## ## data: data_correlation$LSAT and data_correlation$GPA ## t = 4.4413, df = 13, p-value = 0.0006651 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.4385108 0.9219648 ## sample estimates: ## cor ## 0.7763745 In the following, I will write my own code to execute the bootstrapping. I set the bootstrapping number only 500, for illustrative purposes. As we can see, the distribution is not symmetrical. As we can see, the quantile result and c(-1, 1) X 2 are not the same, as the latter assumes symmetrical distribution. However, based on the histogram, we know it is not the case. Thus, quantile would be more appropriate. You can compare the result with that from the boot function. n_row = nrow(data_correlation) n_row ## [1] 15 set.seed(12345) B = 500 result = rep(NA, B) for (i in 1:B) { boot.sample = sample(n_row, replace = TRUE) result_temp = cor.test(data_correlation[boot.sample,]$LSAT,data_correlation[boot.sample,]$GPA) result[i]=result_temp$estimate } hist(result) # 95%: 2.5% 97.5% quantile(result,c(0.025,0.975)) ## 2.5% 97.5% ## 0.4369293 0.9556859 sd(result) ## [1] 0.1342631 mean(result) + c(-1, 1) * 1.96 * sd(result) ## [1] 0.5107704 1.0370816 cor(data_correlation$LSAT,data_correlation$GPA) ## [1] 0.7763745 cor(data_correlation$LSAT,data_correlation$GPA)+ c(-1, 1) * 1.96 * sd(result) ## [1] 0.5132189 1.0395301 # why add 0.005? Not sure. The following is from the webpage. Later note: please refer to the webpage, as it provides the logic of basic interval. 0.776+0.005+c(-1, 1) * 1.96 * 0.131 ## [1] 0.52424 1.03776 In the blog mentioned above, the author used the boot function in R. For the logic of basic interval, please refer to: https://blog.methodsconsultants.com/posts/understanding-bootstrap-confidence-interval-output-from-the-r-boot-package/ library(boot) get_r &lt;- function(data, indices, x, y) { d &lt;- data[indices, ] r &lt;- round(as.numeric(cor(d[x], d[y])), 3) r} set.seed(12345) boot_out &lt;- boot( data_correlation, x = &quot;LSAT&quot;, y = &quot;GPA&quot;, R = 500, statistic = get_r ) boot.ci(boot_out) ## Warning in boot.ci(boot_out): bootstrap variances needed for studentized ## intervals ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 500 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = boot_out) ## ## Intervals : ## Level Normal Basic ## 95% ( 0.5247, 1.0368 ) ( 0.5900, 1.0911 ) ## ## Level Percentile BCa ## 95% ( 0.4609, 0.9620 ) ( 0.3948, 0.9443 ) ## Calculations and Intervals on Original Scale ## Some BCa intervals may be unstable "],
["poisson-regression.html", "Chapter 6 Poisson Regression 6.1 Basic idea 6.2 Trying to understand", " Chapter 6 Poisson Regression 6.1 Basic idea The following is based on the lecture note of https://bookdown.org/roback/bookdown-BeyondMLR/ch-poissonreg.html There is also some R code related to this. https://rdrr.io/github/sta303-bolton/sta303w8/f/inst/rmarkdown/templates/philippines/skeleton/skeleton.Rmd fHH1 &lt;- read.csv(&quot;https://raw.githubusercontent.com/proback/BeyondMLR/master/data/fHH1.csv&quot;) head(fHH1) ## X location age total numLT5 roof ## 1 1 CentralLuzon 65 0 0 Predominantly Strong Material ## 2 2 MetroManila 75 3 0 Predominantly Strong Material ## 3 3 DavaoRegion 54 4 0 Predominantly Strong Material ## 4 4 Visayas 49 3 0 Predominantly Strong Material ## 5 5 MetroManila 74 3 0 Predominantly Strong Material ## 6 6 Visayas 59 6 0 Predominantly Strong Material \\[log (\\lambda_X) =\\beta_0+\\beta_1 X\\] \\[log (\\lambda_{X+1}) =\\beta_0+\\beta_1 (X+1)\\] Thus, \\[log (\\lambda_{X+1})-log (\\lambda_X) =(\\beta_0+\\beta_1 (X+1))-(\\beta_0+\\beta_1 X)\\] Thus, \\[log (\\frac{\\lambda_{X+1}}{\\lambda_X}) =\\beta_1\\] Thus, \\[\\frac{\\lambda_{X+1}}{\\lambda_X} =e^{\\beta_1}\\] Note that, \\(\\lambda\\) here is the mean. It is poisson regression, and the parameter is the mean. Thus, \\(\\frac{\\lambda_{X+1}}{\\lambda_X} =e^{\\beta_1}\\) suggests the ratio change in the DV as the IV change in one unit. \\[log (\\hat{\\lambda}) =b_0+b_1 Age\\] result_1 = glm(total ~ age, family = poisson, data = fHH1) summary(result_1) ## ## Call: ## glm(formula = total ~ age, family = poisson, data = fHH1) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.9079 -0.9637 -0.2155 0.6092 4.9561 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1.5499422 0.0502754 30.829 &lt; 2e-16 *** ## age -0.0047059 0.0009363 -5.026 5.01e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 2362.5 on 1499 degrees of freedom ## Residual deviance: 2337.1 on 1498 degrees of freedom ## AIC: 6714 ## ## Number of Fisher Scoring iterations: 5 \\[\\frac{\\lambda_{Age+1}}{\\lambda_{Age}} =e^{\\beta_1}=e^{-0.0047}=0.995\\] But, what does it mean? It is a bit tricky. But, we can make some modification to help us understand. \\[\\lambda_{Age+1} =0.995 \\lambda_{Age}\\] \\[\\lambda_{Age+1} - \\lambda_{Age}=0.995 \\lambda_{Age}- \\lambda_{Age}=-0.005 \\lambda_{Age}\\] Thus, we can understand that, the difference in the household size mean by changing 1 unit of age (i.e., \\(\\lambda_{Age+1} - \\lambda_{Age}\\)) is \\(-0.005 \\lambda_{Age}\\). That is, the difference in the household size mean by changing 1 unit of age (i.e., \\(\\lambda_{Age+1} - \\lambda_{Age}\\)) is a decrease of 5% of \\(\\lambda_{Age}\\). We can then calculate the confidence interval. \\[(\\hat{\\beta_1}-Z*SE(\\hat{\\beta_1}), \\hat{\\beta_1}+Z*SE(\\hat{\\beta_1}))\\] \\[(-0.0047-1.96*0.00094,-0.0047+1.96*0.00094)=(−0.0065,−0.0029)\\] We can then plug them back to the exponential. exp(−0.0065) ## [1] 0.9935211 exp(−0.0029) ## [1] 0.9971042 \\[(e^{−0.0065},e^{−0.0029})=(0.9935,0.9971)\\] You can also get the confidence interval directly use R code confint(result_1) ## Waiting for profiling to be done... ## 2.5 % 97.5 % ## (Intercept) 1.451170100 1.648249185 ## age -0.006543163 -0.002872717 exp(confint(result_1)) ## Waiting for profiling to be done... ## 2.5 % 97.5 % ## (Intercept) 4.2681057 5.1978713 ## age 0.9934782 0.9971314 Note that, we use original beta to construct a confidence interval and then exponentiate the endpoints is due to the fact that the oringal one is more close to normal distribution. 6.2 Trying to understand With \\(\\hat{\\beta_0} = 1.55\\) and \\(\\hat{\\beta_1}=-0.005\\), we can write down the following. I also simulated the data and showed the relationship between X and Y. As we can see the figure, the relationship is pretty linear. Thus, something to keep in mind, the poisson distribution we typically see is the histogram of Y, rather than the relationship between X and Y. \\[log(\\hat{\\lambda})=1.55-0.005 Age\\] data_age&lt;-seq(20,100,0.5) f_age&lt;-function(x){exp(1.55-(0.005*x))} # cbind(data_age,f_age(data_age)) plot(data_age,f_age(data_age)) hist(f_age(data_age)) "],
["use-r-for-mediation.html", "Chapter 7 Use R for mediation", " Chapter 7 Use R for mediation https://advstats.psychstat.org/book/mediation/index.php "]
]
